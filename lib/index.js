const baseRules = {
  'array-bracket-newline': [
    'error',
    'consistent',
  ],
  'array-bracket-spacing': [
    'error',
    'never',
  ],
  'arrow-parens': [
    'error',
    'always',
  ],
  'arrow-spacing': 'error',
  'block-spacing': 'error',
  'brace-style': [
    'error',
    '1tbs',
    { allowSingleLine: false },
  ],
  'function-paren-newline': [
    'error',
    'consistent',
  ],
  'comma-dangle': [
    'error',
    'always-multiline',
  ],
  'comma-spacing': 'error',
  'curly': [
    'error',
    'multi-line',
    'consistent',
  ],
  'constructor-super': 'error',
  'default-case': 'error',
  'eol-last': 'error',
  'eqeqeq': [
    'error',
    'allow-null',
  ],
  'indent': [
    1,
    2,
    {
      SwitchCase: 1,
      MemberExpression: 0,
    },
  ],
  'key-spacing': 'error',
  'keyword-spacing': 'error',
  'no-buffer-constructor': 'error',
  'no-case-declarations': 'error',
  'no-class-assign': 'error',
  'no-cond-assign': 'error',
  'no-console': 'error',
  'no-const-assign': 'error',
  'no-constant-condition': 'error',
  'no-control-regex': 'error',
  'no-debugger': 'error',
  'no-delete-var': 'error',
  'no-dupe-class-members': 'error',
  'no-dupe-keys': 'error',
  'no-dupe-args': 'error',
  'no-duplicate-case': 'error',
  'no-duplicate-imports': 'error',
  'no-else-return': [
    'error',
    { allowElseIf: false },
  ],
  'no-empty': 'error',
  'no-empty-character-class': 'error',
  'no-empty-pattern': 'error',
  'no-ex-assign': 'error',
  'no-extra-boolean-cast': 'error',
  'no-extra-semi': 'error',
  'no-fallthrough': 'error',
  'no-func-assign': 'error',
  'no-inner-declarations': 'error',
  'no-invalid-regexp': 'error',
  'no-irregular-whitespace': 'error',
  'no-mixed-spaces-and-tabs': 'error',
  'no-multiple-empty-lines': [
    1,
    {
      max: 1,
      maxEOF: 0,
      maxBOF: 0,
    },
  ],
  'no-multi-spaces': 'error',
  'no-negated-in-lhs': 'error',
  'no-new-symbol': 'error',
  'no-obj-calls': 'error',
  'no-octal': 'error',
  'no-redeclare': 'error',
  'no-regex-spaces': 'error',
  'no-self-assign': 'error',
  'no-spaced-func': 'error',
  'no-sparse-arrays': 'error',
  'no-this-before-super': 'error',
  'no-trailing-spaces': 1,
  'no-undef': 'error',
  'no-unexpected-multiline': 1,
  'no-unneeded-ternary': 'error',
  'no-unreachable': 'error',
  'no-unused-labels': 'error',
  'no-unused-vars': ['error', { args: 'none' }],
  'no-useless-concat': 'error',
  'no-useless-constructor': 'error',
  'no-var': 'error',
  'no-whitespace-before-property': 1,
  'object-curly-spacing': [
    1,
    'always',
  ],
  'object-curly-newline': [1, { multiline: true }],
  'object-shorthand': 1,
  'one-var': [
    'error',
    'never',
  ],
  'object-property-newline': [1, { allowAllPropertiesOnSameLine: true }],
  'quote-props': [1, 'consistent-as-needed'],
  'padded-blocks': [1, 'never'],
  'padding-line-between-statements': [
    1,
    {
      blankLine: 'always',
      prev: '*',
      next: 'return',
    },
    {
      blankLine: 'always',
      prev: [
        'const',
        'let',
        'var',
        'if',
        'while',
        'export',
        'cjs-export',
        'import',
        'cjs-import',
        'multiline-expression',
      ],
      next: '*',
    },
    {
      blankLine: 'any',
      prev: [
        'import',
      ],
      next: [
        'import',
      ],
    },
    {
      blankLine: 'any',
      prev: [
        'singleline-const',
        'singleline-let',
      ],
      next: [
        'singleline-const',
        'singleline-let',
      ],
    },
  ],
  'prefer-rest-params': 0,
  'prefer-spread': 'error',
  'prefer-template': 'error',
  'quotes': [
    'error',
    'single',
    { allowTemplateLiterals: true },
  ],
  'semi': [
    'error',
    'never',
  ],
  'semi-spacing': 'error',
  'space-before-blocks': 'error',
  'space-before-function-paren': 'error',
  'space-in-parens': [
    1,
    'never',
  ],
  'space-infix-ops': 'error',
  'space-unary-ops': 'error',
  'template-curly-spacing': 'error',
  'use-isnan': 'error',
  'valid-typeof': 'error',
}

module.exports = {
  configs: {
    general: {
      parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
      },
      plugins: [
        'json-format',
        'promise',
        'sort-requires',
      ],
      settings: { json: { 'sort-package-json': 'pro' } },
      extends: [
        'plugin:promise/recommended',
      ],
      env: {
        node: true,
        es6: true,
      },
      rules: {
        ...baseRules,
        'sort-requires/sort-requires': 2,
      },
      overrides: [
        {
          files: [
            '*.jsx',
            '*.tsx',
          ],
          plugins: [
            'react',
          ],
          extends: [
            'plugin:react/recommended',
          ],
          settings: { react: { version: 'detect' } },
          rules: {
            'indent': 0,
            'react/jsx-sort-props': [1, {
              callbacksLast: true,
              shorthandFirst: true,
            }],
            // '@typescript-eslint/indent': ['error', 2, { 'ignoredNodes': ['JSXElement *', 'JSXElement'] }],
            'react/jsx-indent': [1, 2, { checkAttributes: true, indentLogicalExpressions: true }],
            'react/jsx-indent-props': [1, 2],
            'react/jsx-sort-default-props': [1],
            'react/jsx-tag-spacing': [1],
            'react/jsx-wrap-multilines': [1, {
              declaration: 'parens-new-line',
              assignment: 'parens-new-line',
              return: 'parens-new-line',
              arrow: 'parens-new-line',
              condition: 'ignore',
              logical: 'ignore',
              prop: 'ignore',
            }],
            'react/jsx-one-expression-per-line': [1],
            'react/jsx-first-prop-new-line': [1, 'always'],
            'react/jsx-closing-tag-location': [1],
            'react/jsx-closing-bracket-location': [1, 'tag-aligned'],
            'react/jsx-curly-spacing': 'error',
            'react/jsx-equals-spacing': 'error',
            'react/jsx-no-duplicate-props': 'error',
            'react/jsx-no-undef': 'error',
            'react/jsx-pascal-case': 'error',
            'react/jsx-uses-react': 'error',
            'react/jsx-uses-vars': 'error',
            'react/no-unknown-property': 'error',
            'react/prefer-es6-class': 'error',
            'react/react-in-jsx-scope': 'error',
            'react/require-render-return': 'error',
            'react/jsx-child-element-spacing': 1,
          },
        },
        {
          files: ['*.ts', '*.tsx'],
          parser: '@typescript-eslint/parser',
          plugins: [
            '@typescript-eslint',
          ],
          rules: {
            'no-unused-vars': 'off',
            '@typescript-eslint/no-unused-vars': [
              'error',
              { args: 'none' },
            ],
            '@typescript-eslint/type-annotation-spacing': 'error',
            '@typescript-eslint/no-useless-constructor': [
              'error',
            ],
            '@typescript-eslint/member-delimiter-style': [
              'error',
              {
                multiline: { delimiter: 'none' },
                singleline: { delimiter: 'comma' },
              },
            ],
          },
        },
      ],
    },
    tests: {
      env: { mocha: true },
      globals: { expect: true },
      plugins: ['mocha'],
      rules: {
        'mocha/handle-done-callback': 'error',
        'mocha/no-exclusive-tests': 'error',
        'mocha/no-global-tests': 'error',
      },
    },
  },
  rules: {},
}
